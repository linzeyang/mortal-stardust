'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { aiProcessingService } from '@/lib/api/ai-processing';
import { authHelper } from '@/lib/api/auth-helper';

export default function KimiTestPage() {
  const [result, setResult] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [experienceId, setExperienceId] = useState('');
  const [createdExperienceId, setCreatedExperienceId] = useState('');

  const testKimiConnection = async () => {
    setLoading(true);
    try {
      const response = await fetch('http://localhost:8000/health');
      const data = await response.json();
      setResult(`ÂêéÁ´ØËøûÊé•ÊàêÂäü: ${JSON.stringify(data, null, 2)}`);
    } catch (error) {
      setResult(`ÂêéÁ´ØËøûÊé•Â§±Ë¥•: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const createTestExperience = async () => {
    setLoading(true);
    try {
      setResult('Ê≠£Âú®ÂàõÂª∫ÊµãËØïexperience...\n');

      // Áõ¥Êé•Ëé∑ÂèñÊµãËØïÁî®Êà∑tokenÔºåÁ°Æ‰øùÁî®Êà∑ÂåπÈÖç
      const token = await authHelper.getTestUserToken();

      // ÂàõÂª∫ÊµãËØïexperience - ‰ΩøÁî®Ê≠£Á°ÆÁöÑÊï∞ÊçÆÊ†ºÂºè
      const testExperienceData = {
        title: "ÊµãËØïAIÂ§ÑÁêÜÂäüËÉΩÁöÑÂ∑•‰ΩúÊåëÊàòÁªèÂéÜ",
        content: {
          text: "ËøôÊòØ‰∏Ä‰∏™ÊµãËØïexperienceÔºåÁî®‰∫éÈ™åËØÅAIÂ§ÑÁêÜÂäüËÉΩ„ÄÇÊàëÊúÄËøëÂú®Â∑•‰Ωú‰∏≠ÈÅáÂà∞‰∫Ü‰∏Ä‰∫õÊåëÊàòÔºåÂ∏åÊúõËÉΩÂ§üÂæóÂà∞‰∏Ä‰∫õÊåáÂØºÂíåÂª∫ËÆÆ„ÄÇ‰Ωú‰∏∫‰∏Ä‰∏™ËÅåÂú∫Êñ∞‰∫∫ÔºåÊàëÊÑüÂà∞ÂéãÂäõÂæàÂ§ßÔºåÁâπÂà´ÊòØÂú®Êó∂Èó¥ÁÆ°ÁêÜÂíåÂ∑•‰Ωú‰ºòÂÖàÁ∫ßÊñπÈù¢„ÄÇ",
          mediaFiles: []
        },
        category: "career",
        emotionalState: {
          primary: "anxious",
          intensity: 7,
          description: "ÂØπÂ∑•‰ΩúÊåëÊàòÊÑüÂà∞ÁÑ¶ËôëÂíå‰∏çÁ°ÆÂÆö"
        },
        tags: ["Â∑•‰ΩúÂéãÂäõ", "Êó∂Èó¥ÁÆ°ÁêÜ", "ËÅåÂú∫Êñ∞‰∫∫"],
        metadata: {
          dateOccurred: new Date().toISOString(),
          inputMethod: "text",
          processingStage: "pending"
        }
      };

      console.log('üì§ ÂèëÈÄÅexperienceÂàõÂª∫ËØ∑Ê±Ç:', testExperienceData);

      const response = await fetch('/api/experiences', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(testExperienceData)
      });

      console.log('üì• Êî∂Âà∞experienceÂàõÂª∫ÂìçÂ∫î:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({ detail: 'Unknown error' }));
        console.error('‚ùå ExperienceÂàõÂª∫ÈîôËØØËØ¶ÊÉÖ:', errorData);
        throw new Error(`ÂàõÂª∫experienceÂ§±Ë¥•: ${response.status} ${response.statusText} - ${JSON.stringify(errorData)}`);
      }

      const experienceData = await response.json();
      const newExperienceId = experienceData.id || experienceData._id;

      setCreatedExperienceId(newExperienceId);
      setExperienceId(newExperienceId);
      setResult(prev => prev + `‚úÖ ÊµãËØïexperienceÂàõÂª∫ÊàêÂäü!\nExperience ID: ${newExperienceId}\n\n`);

      // Ëá™Âä®Ê∏ÖÁ©∫ËæìÂÖ•Ê°ÜÂπ∂ËÆæÁΩÆÊñ∞ÁöÑID
      const experienceInput = document.getElementById('experienceId') as HTMLInputElement;
      if (experienceInput) {
        experienceInput.value = newExperienceId;
      }

    } catch (error) {
      setResult(prev => prev + `‚ùå ÂàõÂª∫ÊµãËØïexperienceÂ§±Ë¥•: ${error}\n`);
    } finally {
      setLoading(false);
    }
  };

  const testCORS = async () => {
    setLoading(true);
    let results = 'CORSÊµãËØïÁªìÊûú:\n\n';

    try {
      // ÊµãËØï1: ÁÆÄÂçïÁöÑCORSÊµãËØïÁ´ØÁÇπ
      results += '1. ÊµãËØïÁÆÄÂçïCORSÁ´ØÁÇπ:\n';
      const corsResponse = await fetch('http://localhost:8000/cors-test');
      const corsData = await corsResponse.json();
      results += `Áä∂ÊÄÅ: ${corsResponse.status} ${corsResponse.statusText}\n`;
      results += `ÂìçÂ∫î: ${JSON.stringify(corsData, null, 2)}\n\n`;

      // ÊµãËØï2: OPTIONSÈ¢ÑÊ£ÄËØ∑Ê±Ç
      results += '2. ÊµãËØïOPTIONSÈ¢ÑÊ£ÄËØ∑Ê±Ç:\n';
      const optionsResponse = await fetch('http://localhost:8000/api/ai/stage1/process', {
        method: 'OPTIONS'
      });
      results += `Áä∂ÊÄÅ: ${optionsResponse.status} ${optionsResponse.statusText}\n`;
      results += `Â§¥‰ø°ÊÅØ: ${JSON.stringify(Object.fromEntries(optionsResponse.headers.entries()), null, 2)}\n\n`;

      // ÊµãËØï3: ÂâçÁ´Ø‰ª£ÁêÜÁ´ØÁÇπ
      results += '3. ÊµãËØïÂâçÁ´Ø‰ª£ÁêÜÁ´ØÁÇπ:\n';
      const proxyResponse = await fetch('/api/ai/stage1/process', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer test-token'
        },
        body: JSON.stringify({
          experience_id: 'test-id',
          priority: 'normal'
        })
      });
      results += `Áä∂ÊÄÅ: ${proxyResponse.status} ${proxyResponse.statusText}\n`;
      const proxyText = await proxyResponse.text();
      results += `ÂìçÂ∫î: ${proxyText}\n`;

    } catch (error) {
      results += `CORSÊµãËØïÂ§±Ë¥•: ${error}\n`;
    }

    setResult(results);
    setLoading(false);
  };

  const testBackendAIEndpoint = async () => {
    setLoading(true);
    try {
      // ÂÖàÊµãËØïÂêéÁ´ØAIÁ´ØÁÇπÊòØÂê¶Â≠òÂú®
      const response = await fetch('http://localhost:8000/api/ai/stage1/process', {
        method: 'OPTIONS'  // È¢ÑÊ£ÄËØ∑Ê±Ç
      });

      setResult(`ÂêéÁ´ØAIÁ´ØÁÇπÊµãËØï:
Áä∂ÊÄÅ: ${response.status} ${response.statusText}
Â§¥‰ø°ÊÅØ: ${JSON.stringify(Object.fromEntries(response.headers.entries()), null, 2)}`);

    } catch (error) {
      setResult(`ÂêéÁ´ØAIÁ´ØÁÇπÊµãËØïÂ§±Ë¥•: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const testDirectBackendAPI = async () => {
    if (!experienceId.trim()) {
      setResult('ËØ∑ÂÖàËæìÂÖ•ÁªèÂéÜID');
      return;
    }

    setLoading(true);
    try {
      setResult('Ê≠£Âú®Áõ¥Êé•ÊµãËØïÂêéÁ´ØAIÂ§ÑÁêÜÁ´ØÁÇπ...\n');

      // Ëé∑Âèñtoken
      const token = await authHelper.getAuthToken();
      setResult(prev => prev + `Ëé∑ÂèñÂà∞token: ${token ? token.substring(0, 20) + '...' : 'null'}\n`);

      // Áõ¥Êé•Ë∞ÉÁî®ÂêéÁ´ØAPI
      const response = await fetch('http://localhost:8000/api/ai/stage1/process', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          experience_id: experienceId.trim(),
          priority: 'normal'
        })
      });

      setResult(prev => prev + `ÂêéÁ´ØÂìçÂ∫îÁä∂ÊÄÅ: ${response.status} ${response.statusText}\n`);

      const responseText = await response.text();
      setResult(prev => prev + `ÂêéÁ´ØÂìçÂ∫îÂÜÖÂÆπ: ${responseText}\n`);

    } catch (error) {
      setResult(prev => prev + `\n‚ùå Áõ¥Êé•ÂêéÁ´ØAPIÊµãËØïÂ§±Ë¥•: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const testStage2Processing = async () => {
    if (!experienceId.trim()) {
      setResult('ËØ∑ÂÖàËæìÂÖ•ÁªèÂéÜID');
      return;
    }

    setLoading(true);
    try {
      setResult('Ê≠£Âú®ÂêØÂä®Stage 2 AIÂ§ÑÁêÜ...\n');

      // Ëé∑Âèñtoken
      const token = await authHelper.getAuthToken();
      setResult(prev => prev + `Ëé∑ÂèñÂà∞token: ${token ? token.substring(0, 20) + '...' : 'null'}\n`);

      // ÂêØÂä®Stage 2Â§ÑÁêÜ
      console.log('üöÄ ÂêØÂä®Stage 2Â§ÑÁêÜ...');
      const stage2Response = await aiProcessingService.startStage2Processing({
        experience_id: experienceId.trim(),
        priority: 'normal'
      });

      setResult(prev => prev + `Stage 2Â§ÑÁêÜÂêØÂä®ÊàêÂäü:\n${JSON.stringify(stage2Response, null, 2)}\n\nÊ≠£Âú®ËΩÆËØ¢Áä∂ÊÄÅ...\n`);

      // ËΩÆËØ¢Â§ÑÁêÜÁä∂ÊÄÅ
      const stage2Result = await aiProcessingService.pollUntilComplete(
        stage2Response.solution_id,
        2, // Stage 2
        (status) => {
          setResult(prev => prev + `Áä∂ÊÄÅÊõ¥Êñ∞: ${status.status} (${Math.round(status.confidence_score * 100)}%)\n`);
        }
      );

      setResult(prev => prev + `\n‚úÖ Stage 2 AIÂ§ÑÁêÜÂÆåÊàê!\n\nÂÆåÊï¥ÁªìÊûú:\n${JSON.stringify(stage2Result, null, 2)}\n\n`);

      setResult(prev => prev + `ÁªìÊûúÈ¢ÑËßà:\n`);
      setResult(prev => prev + `Ê†áÈ¢ò: ${stage2Result.content?.title || 'Êó†Ê†áÈ¢ò'}\n`);
      setResult(prev => prev + `ÊèèËø∞ÈïøÂ∫¶: ${stage2Result.content?.description?.length || 0} Â≠óÁ¨¶\n`);
      setResult(prev => prev + `Ë°åÂä®Ê≠•È™§: ${stage2Result.content?.actionSteps?.length || 0} Êù°\n`);
      setResult(prev => prev + `Âª∫ËÆÆÊï∞Èáè: ${stage2Result.content?.recommendations?.length || 0} Êù°\n`);
      setResult(prev => prev + `ÁΩÆ‰ø°Â∫¶: ${Math.round((stage2Result.metadata?.confidence_score || 0) * 100)}%\n`);
      setResult(prev => prev + `Â§ÑÁêÜÊó∂Èó¥: ${stage2Result.metadata?.processing_time || 0} Áßí\n`);

      // ÊòæÁ§∫ÈÉ®ÂàÜÂÜÖÂÆπ
      if (stage2Result.content?.description) {
        const contentPreview = stage2Result.content.description.substring(0, 200) + '...';
        setResult(prev => prev + `\nÂÜÖÂÆπÈ¢ÑËßà:\n${contentPreview}\n`);
      } else {
        setResult(prev => prev + `\n‚ö†Ô∏è ÂÜÖÂÆπ‰∏∫Á©∫ÔºåÂèØËÉΩAIÂ§ÑÁêÜÂ§±Ë¥•\n`);
      }

    } catch (error) {
      setResult(prev => prev + `\n‚ùå Stage 2 AIÂ§ÑÁêÜÂ§±Ë¥•: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const testStage3Processing = async () => {
    if (!experienceId.trim()) {
      setResult('ËØ∑ÂÖàËæìÂÖ•ÁªèÂéÜID');
      return;
    }

    setLoading(true);
    try {
      setResult('Ê≠£Âú®ÂêØÂä®Stage 3 AIÂ§ÑÁêÜ...\n');

      // Ëé∑Âèñtoken
      const token = await authHelper.getAuthToken();
      setResult(prev => prev + `Ëé∑ÂèñÂà∞token: ${token ? token.substring(0, 20) + '...' : 'null'}\n`);

      // ÂêØÂä®Stage 3Â§ÑÁêÜÔºåÂåÖÂê´Ê®°ÊãüÁöÑfollow-upÊï∞ÊçÆ
      console.log('üöÄ ÂêØÂä®Stage 3Â§ÑÁêÜ...');
      const stage3Response = await aiProcessingService.startStage3Processing({
        experience_id: experienceId.trim(),
        priority: 'normal',
        follow_up_data: {
          progress_rating: 7,
          implemented_actions: ['ÂºÄÂßã‰ΩøÁî®Êó∂Èó¥ÁÆ°ÁêÜÂ∑•ÂÖ∑', '‰∏éÂêå‰∫ãÂª∫Á´ãÊõ¥Â•ΩÁöÑÊ≤üÈÄö'],
          challenges_faced: ['‰ªçÁÑ∂ÊÑüÂà∞Â∑•‰ΩúÂéãÂäõ', 'Êó∂Èó¥ÂÆâÊéí‰∏çÂ§üÂêàÁêÜ'],
          success_stories: ['ÂÆåÊàê‰∫Ü‰∏Ä‰∏™ÈáçË¶ÅÈ°πÁõÆ', 'ÂæóÂà∞‰∫Ü‰∏äÂè∏ÁöÑËÆ§ÂèØ'],
          additional_concerns: 'Â∏åÊúõËÉΩÂ§üËøõ‰∏ÄÊ≠•ÊèêÂçáÂ∑•‰ΩúÊïàÁéá',
          satisfaction_level: 6
        }
      });

      setResult(prev => prev + `Stage 3Â§ÑÁêÜÂêØÂä®ÊàêÂäü:\n${JSON.stringify(stage3Response, null, 2)}\n\nÊ≠£Âú®ËΩÆËØ¢Áä∂ÊÄÅ...\n`);

      // ËΩÆËØ¢Â§ÑÁêÜÁä∂ÊÄÅ
      const stage3Result = await aiProcessingService.pollUntilComplete(
        stage3Response.solution_id,
        3, // Stage 3
        (status) => {
          setResult(prev => prev + `Áä∂ÊÄÅÊõ¥Êñ∞: ${status.status} (${Math.round(status.confidence_score * 100)}%)\n`);
        }
      );

      setResult(prev => prev + `\n‚úÖ Stage 3 AIÂ§ÑÁêÜÂÆåÊàê!\n\nÂÆåÊï¥ÁªìÊûú:\n${JSON.stringify(stage3Result, null, 2)}\n\n`);

      setResult(prev => prev + `ÁªìÊûúÈ¢ÑËßà:\n`);
      setResult(prev => prev + `Ê†áÈ¢ò: ${stage3Result.content?.title || 'Êó†Ê†áÈ¢ò'}\n`);
      setResult(prev => prev + `ÊèèËø∞ÈïøÂ∫¶: ${stage3Result.content?.description?.length || 0} Â≠óÁ¨¶\n`);
      setResult(prev => prev + `Ë∑üËøõËÆ°Âàí: ${stage3Result.content?.follow_up_plan?.length || 0} Êù°\n`);
      setResult(prev => prev + `ÈÄÇÂ∫îÂª∫ËÆÆ: ${stage3Result.content?.adaptation_suggestions?.length || 0} Êù°\n`);
      setResult(prev => prev + `ÈïøÊúüÁõÆÊ†á: ${stage3Result.content?.long_term_goals?.length || 0} Êù°\n`);
      setResult(prev => prev + `ÁΩÆ‰ø°Â∫¶: ${Math.round((stage3Result.metadata?.confidence_score || 0) * 100)}%\n`);
      setResult(prev => prev + `Â§ÑÁêÜÊó∂Èó¥: ${stage3Result.metadata?.processing_time || 0} Áßí\n`);

      // ÊòæÁ§∫ÈÉ®ÂàÜÂÜÖÂÆπ
      if (stage3Result.content?.description) {
        const contentPreview = stage3Result.content.description.substring(0, 200) + '...';
        setResult(prev => prev + `\nÂÜÖÂÆπÈ¢ÑËßà:\n${contentPreview}\n`);
      } else {
        setResult(prev => prev + `\n‚ö†Ô∏è ÂÜÖÂÆπ‰∏∫Á©∫ÔºåÂèØËÉΩAIÂ§ÑÁêÜÂ§±Ë¥•\n`);
      }

    } catch (error) {
      setResult(prev => prev + `\n‚ùå Stage 3 AIÂ§ÑÁêÜÂ§±Ë¥•: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const testKimiAPI = async () => {
    if (!experienceId.trim()) {
      setResult('ËØ∑ÂÖàËæìÂÖ•ÁªèÂéÜID');
      return;
    }

    setLoading(true);
    try {
      setResult('Ê≠£Âú®ÂêØÂä®Kimi AIÂ§ÑÁêÜ...\n');

      // ÂÖàÊµãËØïÂâçÁ´Ø‰ª£ÁêÜÊòØÂê¶Â∑•‰Ωú
      console.log('üîç ÊµãËØïÂâçÁ´Ø‰ª£ÁêÜËøûÊé•...');
      try {
        const proxyTestResponse = await fetch('/api/ai/stage1/process', {
          method: 'OPTIONS'
        });
        console.log('üîç ÂâçÁ´Ø‰ª£ÁêÜOPTIONSÊµãËØï:', {
          status: proxyTestResponse.status,
          statusText: proxyTestResponse.statusText,
          ok: proxyTestResponse.ok
        });
      } catch (proxyError) {
        console.error('‚ùå ÂâçÁ´Ø‰ª£ÁêÜËøûÊé•Â§±Ë¥•:', proxyError);
      }

      // Ëé∑Âèñtoken
      const token = await authHelper.getAuthToken();

      // ÊòæÁ§∫Ë∞ÉËØï‰ø°ÊÅØ
      console.log('üîç Ë∞ÉËØï‰ø°ÊÅØ:');
      console.log('   Experience ID:', experienceId.trim());
      console.log('   Token (Ââç20Â≠óÁ¨¶):', token ? token.substring(0, 20) + '...' : 'null');

      // Ë∑≥ËøáexperienceÈ™åËØÅÔºåÁõ¥Êé•ÊµãËØïAIÂ§ÑÁêÜ
      console.log('‚è≠Ô∏è Ë∑≥ËøáexperienceÈ™åËØÅÔºåÁõ¥Êé•ÊµãËØïAIÂ§ÑÁêÜ...');

      // ÂÖàÊ£ÄÊü•ÂêéÁ´ØË∑ØÁî±
      console.log('üîç Ê£ÄÊü•ÂêéÁ´ØË∑ØÁî±Ê≥®ÂÜå...');
      try {
        const routesResponse = await fetch('http://localhost:8000/debug/routes');
        const routesData = await routesResponse.json();
        console.log('üìã ÂêéÁ´ØÊ≥®ÂÜåÁöÑË∑ØÁî±:', routesData);

        // Êü•ÊâæAIÁõ∏ÂÖ≥Ë∑ØÁî±
        const aiRoutes = routesData.routes.filter(route =>
          route.path.includes('ai') || route.path.includes('stage1')
        );
        console.log('ü§ñ AIÁõ∏ÂÖ≥Ë∑ØÁî±:', aiRoutes);

        // ËØ¶ÁªÜÊòæÁ§∫ÊØè‰∏™AIË∑ØÁî±
        aiRoutes.forEach((route, index) => {
          console.log(`${index + 1}. ${route.methods.join(',')} ${route.path} (${route.name})`);
        });

        // ÁâπÂà´Êü•ÊâæÊàë‰ª¨ÈúÄË¶ÅÁöÑË∑ØÁî±
        const processRoutes = routesData.routes.filter(route =>
          route.path === '/api/ai/stage1/process'
        );
        console.log('üéØ ÊâÄÊúâ /api/ai/stage1/process Ë∑ØÁî±:', processRoutes);

        processRoutes.forEach(route => {
          console.log(`   - ÊñπÊ≥ï: ${route.methods.join(',')} ÂêçÁß∞: ${route.name}`);
        });
      } catch (routeError) {
        console.error('‚ùå Êó†Ê≥ïËé∑ÂèñÂêéÁ´ØË∑ØÁî±:', routeError);
      }

      // ÂÖàÊµãËØïÁÆÄÂçïÁöÑÊµãËØïÁ´ØÁÇπ
      console.log('üß™ ÊµãËØïÁÆÄÂçïÁöÑAIÊµãËØïÁ´ØÁÇπ...');
      try {
        const testResponse = await fetch('http://localhost:8000/api/ai/stage1/simple-test', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          }
        });
        console.log('üß™ ÁÆÄÂçïÊµãËØïÂìçÂ∫î:', {
          status: testResponse.status,
          statusText: testResponse.statusText,
          ok: testResponse.ok
        });
        if (testResponse.ok) {
          const testData = await testResponse.json();
          console.log('üß™ ÁÆÄÂçïÊµãËØïÊï∞ÊçÆ:', testData);
        }
      } catch (testError) {
        console.error('‚ùå ÁÆÄÂçïÊµãËØïÂ§±Ë¥•:', testError);
      }

      // ÂÖàÊµãËØï‰∏çÂ∏¶ËÆ§ËØÅÁöÑËØ∑Ê±Ç
      console.log('üîÑ ÊµãËØï‰∏çÂ∏¶ËÆ§ËØÅÁöÑAIÂ§ÑÁêÜËØ∑Ê±Ç...');
      try {
        const noAuthResponse = await fetch('http://localhost:8000/api/ai/stage1/process', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            experience_id: experienceId.trim(),
            priority: 'normal'
          })
        });
        console.log('üîÑ ‰∏çÂ∏¶ËÆ§ËØÅÁöÑÂìçÂ∫î:', {
          status: noAuthResponse.status,
          statusText: noAuthResponse.statusText,
          ok: noAuthResponse.ok
        });
        if (!noAuthResponse.ok) {
          const errorData = await noAuthResponse.json().catch(() => ({ detail: 'Unknown error' }));
          console.log('üîÑ ‰∏çÂ∏¶ËÆ§ËØÅÁöÑÈîôËØØ:', errorData);
        }
      } catch (noAuthError) {
        console.error('‚ùå ‰∏çÂ∏¶ËÆ§ËØÅÁöÑËØ∑Ê±ÇÂ§±Ë¥•:', noAuthError);
      }

      // Áõ¥Êé•Ë∞ÉÁî®ÂêéÁ´ØAIÂ§ÑÁêÜAPIÔºåÁªïËøáÂâçÁ´Ø‰ª£ÁêÜ
      console.log('üîÑ Áõ¥Êé•Ë∞ÉÁî®ÂêéÁ´ØAIÂ§ÑÁêÜAPI (Â∏¶ËÆ§ËØÅ)...');
      const backendResponse = await fetch('http://localhost:8000/api/ai/stage1/process', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          experience_id: experienceId.trim(),
          priority: 'normal'
        })
      });

      console.log('üì• ÂêéÁ´ØÁõ¥Êé•ÂìçÂ∫î:', {
        status: backendResponse.status,
        statusText: backendResponse.statusText,
        ok: backendResponse.ok
      });

      if (!backendResponse.ok) {
        const errorData = await backendResponse.json().catch(() => ({ detail: 'Unknown error' }));
        console.error('‚ùå ÂêéÁ´ØÁõ¥Êé•Ë∞ÉÁî®ÈîôËØØ:', errorData);
        throw new Error(`ÂêéÁ´ØAIÂ§ÑÁêÜÂ§±Ë¥•: ${backendResponse.status} - ${JSON.stringify(errorData)}`);
      }

      const aiResponse = await backendResponse.json();

      setResult(prev => prev + `AIÂ§ÑÁêÜÂêØÂä®ÊàêÂäü:\n${JSON.stringify(aiResponse, null, 2)}\n\nÊ≠£Âú®ËΩÆËØ¢Áä∂ÊÄÅ...\n`);

      // ËΩÆËØ¢Â§ÑÁêÜÁä∂ÊÄÅ
      const aiResult = await aiProcessingService.pollUntilComplete(
        aiResponse.solution_id,
        1,
        (status) => {
          setResult(prev => prev + `Áä∂ÊÄÅÊõ¥Êñ∞: ${status.status} (${Math.round(status.confidence_score * 100)}%)\n`);
        }
      );

      setResult(prev => prev + `\n‚úÖ Kimi AIÂ§ÑÁêÜÂÆåÊàê!\n\nÁªìÊûúÈ¢ÑËßà:\n`);
      setResult(prev => prev + `Ê†áÈ¢ò: ${aiResult.content?.title || 'Êó†Ê†áÈ¢ò'}\n`);
      setResult(prev => prev + `ÂÜÖÂÆπÈïøÂ∫¶: ${aiResult.content?.content?.length || 0} Â≠óÁ¨¶\n`);
      setResult(prev => prev + `Âª∫ËÆÆÊï∞Èáè: ${aiResult.content?.recommendations?.length || 0} Êù°\n`);
      setResult(prev => prev + `Â∫îÂØπÁ≠ñÁï•: ${aiResult.content?.coping_strategies?.length || 0} Êù°\n`);
      setResult(prev => prev + `ÊÉÖÊÑüÊîØÊåÅ: ${aiResult.content?.emotional_support?.length || 0} Êù°\n`);
      setResult(prev => prev + `ÁΩÆ‰ø°Â∫¶: ${Math.round((aiResult.metadata?.confidence_score || 0) * 100)}%\n`);
      setResult(prev => prev + `Â§ÑÁêÜÊó∂Èó¥: ${aiResult.metadata?.processing_time || 0} Áßí\n`);

      // ÊòæÁ§∫ÈÉ®ÂàÜÂÜÖÂÆπ
      if (aiResult.content?.content) {
        const contentPreview = aiResult.content.content.substring(0, 200) + '...';
        setResult(prev => prev + `\nÂÜÖÂÆπÈ¢ÑËßà:\n${contentPreview}\n`);
      }

    } catch (error) {
      setResult(prev => prev + `\n‚ùå Kimi AIÂ§ÑÁêÜÂ§±Ë¥•: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const testKimiDirectAPI = async () => {
    setLoading(true);
    try {
      setResult('Ê≠£Âú®ÊµãËØïKimi APIÁõ¥Êé•ËøûÊé•...\n');

      const response = await fetch('http://localhost:8000/kimi-api-test', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      const data = await response.json();

      console.log('üß™ Kimi APIÊµãËØïÂìçÂ∫î:', data);

      if (data.status === 'success') {
        setResult(prev => prev + `‚úÖ Kimi APIËøûÊé•ÊµãËØïÊàêÂäü!\nÊ®°Âûã: ${data.test_response.model}\nÂìçÂ∫îÂÜÖÂÆπ: ${data.test_response.content}\nÁî®ÈáèÁªüËÆ°: ${JSON.stringify(data.test_response.usage)}\n\n`);
      } else {
        setResult(prev => prev + `‚ùå Kimi APIËøûÊé•ÊµãËØïÂ§±Ë¥•!\nÈîôËØØÁ±ªÂûã: ${data.error_type}\nÈîôËØØ‰ø°ÊÅØ: ${data.message}\nËØ¶ÁªÜÈîôËØØ: ${data.error}\nÂª∫ËÆÆ: ${data.suggestions?.join(', ')}\n\n`);
      }

    } catch (error) {
      setResult(prev => prev + `‚ùå ÊµãËØïËØ∑Ê±ÇÂ§±Ë¥•: ${error}\n`);
    } finally {
      setLoading(false);
    }
  };

  const testDirectKimiCall = async () => {
    setLoading(true);
    try {
      const testData = {
        model: "moonshot-v1-8k",
        messages: [
          {
            role: "system",
            content: "‰Ω†ÊòØ‰∏Ä‰Ωç‰∏ì‰∏öÁöÑÂøÉÁêÜÂí®ËØ¢Â∏àÔºåËØ∑Áî®‰∏≠ÊñáÂõûÂ§ç„ÄÇ"
          },
          {
            role: "user",
            content: "ÊàëÊúÄËøëÂ∑•‰ΩúÂéãÂäõÂæàÂ§ßÔºåÁªèÂ∏∏Â§±Áú†ÔºåËØ•ÊÄé‰πàÂäûÔºü"
          }
        ],
        temperature: 0.7,
        max_tokens: 1000
      };

      // ‰ΩøÁî®ÂΩìÂâçÈÖçÁΩÆÁöÑAPIÂØÜÈí•
      const response = await fetch('https://api.moonshot.cn/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer sk-vaZfytprAC91TgsbahrjI2rksRWjMksJh4xKyfsONrXFFAoQ`
        },
        body: JSON.stringify(testData)
      });

      const responseText = await response.text();

      setResult(`Áõ¥Êé•Kimi APIË∞ÉÁî®ÁªìÊûú:
Áä∂ÊÄÅ: ${response.status} ${response.statusText}
Â§¥‰ø°ÊÅØ: ${JSON.stringify(Object.fromEntries(response.headers.entries()), null, 2)}
ÂìçÂ∫î: ${responseText}`);

    } catch (error) {
      setResult(`Áõ¥Êé•Kimi APIË∞ÉÁî®Â§±Ë¥•: ${error}`);
    } finally {
      setLoading(false);
    }
  };

  const testAlternativeUrls = async () => {
    setLoading(true);
    const urlsToTest = [
      'https://api.moonshot.cn/v1/chat/completions',
      'https://api.moonshot.ai/v1/chat/completions',
      'https://kimi.moonshot.cn/api/v1/chat/completions',
      'https://platform.moonshot.cn/api/v1/chat/completions'
    ];

    let results = 'ÊµãËØïÂ§ö‰∏™ÂèØËÉΩÁöÑAPIÁ´ØÁÇπ:\n\n';

    for (const url of urlsToTest) {
      try {
        results += `ÊµãËØï: ${url}\n`;

        const response = await fetch(url, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer sk-vaZfytprAC91TgsbahrjI2rksRWjMksJh4xKyfsONrXFFAoQ`
          },
          body: JSON.stringify({
            model: "moonshot-v1-8k",
            messages: [{ role: "user", content: "ÊµãËØï" }],
            max_tokens: 10
          })
        });

        results += `Áä∂ÊÄÅ: ${response.status} ${response.statusText}\n`;

        if (response.ok) {
          const data = await response.json();
          results += `‚úÖ ÊàêÂäü! ÂìçÂ∫î: ${JSON.stringify(data, null, 2)}\n`;
          break;
        } else {
          const errorText = await response.text();
          results += `‚ùå Â§±Ë¥•: ${errorText}\n`;
        }

      } catch (error) {
        results += `‚ùå ÁΩëÁªúÈîôËØØ: ${error}\n`;
      }

      results += '\n---\n\n';
    }

    setResult(results);
    setLoading(false);
  };

  return (
    <div className="container mx-auto p-8">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            Kimi APIËøûÊé•ÊµãËØï
            <Badge variant="outline">Êúà‰πãÊöóÈù¢</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* ÊµãËØïÊåâÈíÆ */}
          <div className="flex flex-wrap gap-4">
            <Button onClick={testKimiConnection} disabled={loading}>
              ÊµãËØïÂêéÁ´ØËøûÊé•
            </Button>
            <Button onClick={createTestExperience} disabled={loading} variant="default">
              ÂàõÂª∫ÊµãËØïExperience
            </Button>
            <Button onClick={testKimiDirectAPI} disabled={loading} variant="secondary">
              ÊµãËØïÂêéÁ´ØKimi API
            </Button>
            <Button onClick={testDirectKimiCall} disabled={loading} variant="outline">
              Áõ¥Êé•ÊµãËØïKimi API
            </Button>
            <Button onClick={testStage2Processing} disabled={loading || !experienceId.trim()} variant="default">
              ÊµãËØïStage 2Â§ÑÁêÜ
            </Button>
            <Button onClick={testStage3Processing} disabled={loading || !experienceId.trim()} variant="secondary">
              ÊµãËØïStage 3Â§ÑÁêÜ
            </Button>
            <Button onClick={testAlternativeUrls} disabled={loading} variant="secondary">
              ÊµãËØïÂ§ö‰∏™APIÁ´ØÁÇπ
            </Button>
            <Button onClick={testCORS} disabled={loading} variant="destructive">
              ÊµãËØïCORSÈÖçÁΩÆ
            </Button>
            <Button onClick={testBackendAIEndpoint} disabled={loading} variant="outline">
              ÊµãËØïÂêéÁ´ØAIÁ´ØÁÇπ
            </Button>
          </div>

          {/* ÁªèÂéÜIDËæìÂÖ• */}
          <div className="space-y-2">
            <Label htmlFor="experienceId">ÁªèÂéÜID (Áî®‰∫éÊµãËØïAIÂ§ÑÁêÜ)</Label>
            <div className="flex gap-2">
              <Input
                id="experienceId"
                value={experienceId}
                onChange={(e) => setExperienceId(e.target.value)}
                placeholder="ËæìÂÖ•Â∑≤‰øùÂ≠òÁöÑÁªèÂéÜID..."
                className="flex-1"
              />
              <Button onClick={testDirectBackendAPI} disabled={loading || !experienceId.trim()} variant="destructive">
                Áõ¥Êé•ÊµãËØïÂêéÁ´Ø(‰ºöÊúâCORSÈóÆÈ¢ò)
              </Button>
              <Button onClick={testKimiAPI} disabled={loading || !experienceId.trim()}>
                ÊµãËØïAIÂ§ÑÁêÜ
              </Button>
            </div>
            <p className="text-sm text-gray-500">
              ÊèêÁ§∫ÔºöÂÖàÂú®ÁªèÂéÜÈ°µÈù¢Êèê‰∫§‰∏Ä‰∏™ÁªèÂéÜÔºåÁÑ∂ÂêéÂ§çÂà∂ËøîÂõûÁöÑIDÂà∞ËøôÈáåÊµãËØï
            </p>
          </div>

          {/* ÁªìÊûúÊòæÁ§∫ */}
          <div>
            <Label className="font-semibold mb-2 block">ÊµãËØïÁªìÊûú:</Label>
            <Textarea
              value={result}
              readOnly
              className="min-h-[400px] font-mono text-sm"
              placeholder="ÁÇπÂáªÊåâÈíÆÂºÄÂßãÊµãËØï..."
            />
          </div>

          {/* ÈÖçÁΩÆËØ¥Êòé */}
          <Card className="bg-blue-50">
            <CardHeader>
              <CardTitle className="text-lg">ÈÖçÁΩÆËØ¥Êòé</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2 text-sm">
              <p><strong>1. Ëé∑ÂèñKimi APIÂØÜÈí•:</strong></p>
              <p className="ml-4">‚Ä¢ ËÆøÈóÆ <a href="https://platform.moonshot.cn/" target="_blank" className="text-blue-600 underline">https://platform.moonshot.cn/</a></p>
              <p className="ml-4">‚Ä¢ Ê≥®ÂÜåË¥¶Âè∑Âπ∂Ëé∑ÂèñAPIÂØÜÈí•</p>

              <p><strong>2. ÂèØËÉΩÁöÑAPIÁ´ØÁÇπURL:</strong></p>
              <div className="ml-4 space-y-1 text-xs">
                <p>‚Ä¢ <code>https://api.moonshot.cn/v1</code> (ÂÆòÊñπÊñáÊ°£)</p>
                <p>‚Ä¢ <code>https://api.moonshot.ai/v1</code> (Â§áÁî®ÂüüÂêç)</p>
                <p>‚Ä¢ <code>https://kimi.moonshot.cn/api/v1</code> (KimiÂüüÂêç)</p>
                <p>‚Ä¢ <code>https://platform.moonshot.cn/api/v1</code> (Âπ≥Âè∞ÂüüÂêç)</p>
              </div>

              <p><strong>3. ÈÖçÁΩÆÂêéÁ´ØÁéØÂ¢ÉÂèòÈáè:</strong></p>
              <p className="ml-4">‚Ä¢ Âú® <code>backend/.env</code> Êñá‰ª∂‰∏≠ËÆæÁΩÆ:</p>
              <pre className="ml-4 bg-gray-100 p-2 rounded text-xs">
                {`OPENAI_API_KEY=sk-vaZfytprAC91TgsbahrjI2rksRWjMksJh4xKyfsONrXFFAoQ
OPENAI_API_URL=https://api.moonshot.cn/v1
OPENAI_MODEL_NAME=moonshot-v1-8k`}
              </pre>

              <p><strong>3. ÈáçÂêØÂêéÁ´ØÊúçÂä°:</strong></p>
              <p className="ml-4">‚Ä¢ ‰øÆÊîπÁéØÂ¢ÉÂèòÈáèÂêéÈúÄË¶ÅÈáçÂêØÂêéÁ´ØÊúçÂä°ÊâçËÉΩÁîüÊïà</p>
            </CardContent>
          </Card>
        </CardContent>
      </Card>
    </div>
  );
}